#include "images.h"
#include <fstream>
#include <vector>
#include <iostream>
#include <algorithm>
#include <stdio.h>

using namespace std;

int main()
{
 
    std::cout<<"start simulation..."<<std::endl;
    //init(110,160,0*3.14159/180.0); // arguments - initial robot position, x,y,angle
    
    init(110,200,0*3.14159/180.0); // debugging position
    
    update_sim(200); //redraw everything and pause for 300 milliseconds

    while(true){
        update_sim(300);
        
        int num_black = 0;
        double error = 0.0;
        int vl,vr;
        int vcr = 10;	// speed of left and right motor going forward
        int dv = 0;		//difference in speed of left and right motors
        double kp = 0.0025; // estimation of multiply the error 

        for (int col = 0; col < camera_image.width; col++){   //Loop through image

            if (get_camera_pixel(camera_image.height/2, col, 3) < 100 ) // detecting black pixel by half of the camera in horizontal(height)
            {
            num_black++;	//counting number of black 
            error = error + (col - 50); // creating a error by half of the camera in vertical  


            }
        }
        dv = error * kp; 
        vl = vcr + dv;	// left motor
        vr = vcr - dv;	// right motor


        if (num_black <= 5 && error >= 0 ){ //detect if black is less than 5 when error is negative 
            set_motors(-10,0); // stop and turn 
        

           std::cout <<"out of track"<<std::endl;

        } if (num_black <= 5 && error <= 0 ){	//detect if black is less than 5 when error is postive 
            set_motors(0,-10);

        }
            else if (error < - 700){	// detect if error is more than negative 700

            set_motors(vl,vr+3);	//turn while moving forward

            }
            else if (error >  700){ // detect if error is more than postive 700

            set_motors(vl+3,vr);

            }else set_motors(vl,vr); // keep moving if there no turning 


        std::cout << "num of black: " << num_black << " error: " << error <<std::endl;
         std::cout << "dv: " << dv << " vl: " << vl << " vr:" << vr <<std::endl;
        //int dummy; std::cin>>dummy;

    }
    return 0;
}
